"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileGlobalVariable = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class FileGlobalVariable {
    constructor() {
        this.description = {
            displayName: 'File Global Variable',
            name: 'fileGlobalVariable',
            icon: 'file:globals-icon-60px.png',
            group: ['input'],
            version: 1,
            description: 'Manage global variables via a JSON file',
            defaults: {
                name: 'File Global Variable',
            },
            inputs: ["main"],
            outputs: ["main"],
            properties: [
                {
                    displayName: '操作',
                    name: 'action',
                    type: 'options',
                    options: [
                        { name: '获取', value: 'get' },
                        { name: '设置', value: 'set' },
                        { name: '删除', value: 'delete' },
                        { name: '列出全部', value: 'list' },
                    ],
                    default: 'get',
                    required: true,
                },
                {
                    displayName: '变量Key(多个用英文逗号分隔)',
                    name: 'key',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            action: ['get', 'set', 'delete'],
                        },
                    },
                    description: '变量Key(多个用英文逗号分隔)',
                },
                {
                    displayName: '变量值',
                    name: 'value',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            action: ['set'],
                        },
                    },
                    description: '变量值',
                },
                {
                    displayName: '变量类型',
                    name: 'valueType',
                    type: 'options',
                    options: [
                        { name: '字符串', value: 'string' },
                        { name: '数字', value: 'number' },
                        { name: '布尔', value: 'boolean' },
                        { name: '对象', value: 'object' },
                        { name: '数组', value: 'array' },
                    ],
                    default: 'string',
                    displayOptions: {
                        show: {
                            action: ['set'],
                        },
                    },
                    description: '变量值',
                },
                {
                    displayName: '变量文件存储路径',
                    name: 'filePath',
                    type: 'string',
                    default: '~/.n8n/global_variables.json',
                    required: true,
                    description: '变量JSON文件存储路径',
                },
            ],
        };
    }
    async execute() {
        var _a;
        const items = this.getInputData();
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            const action = this.getNodeParameter('action', i);
            const filePath = this.getNodeParameter('filePath', i);
            let key;
            let valueRaw;
            let valueType;
            if (['get', 'set', 'delete'].includes(action)) {
                key = this.getNodeParameter('key', i);
            }
            if (action === 'set') {
                valueRaw = this.getNodeParameter('value', i);
                valueType = this.getNodeParameter('valueType', i);
            }
            const dir = path.dirname(filePath);
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
            let data = {};
            if (fs.existsSync(filePath)) {
                const fileContent = fs.readFileSync(filePath, 'utf8');
                try {
                    data = JSON.parse(fileContent || '{}');
                }
                catch (error) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `Failed to parse JSON file at ${filePath}: ${error.message}`);
                }
            }
            let output = { action };
            if (action === 'get') {
                if (key === undefined || key.trim() === '') {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Key is required and cannot be empty');
                }
                output.keys = key.split(',').map(k => k.trim());
                output.results = output.keys.map((k) => {
                    var _a;
                    return ({
                        key: k,
                        value: (_a = data[k]) !== null && _a !== void 0 ? _a : null,
                    });
                });
            }
            else if (action === 'set') {
                if (!valueRaw || valueRaw.trim() === '') {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), '变量值不为空');
                }
                if (!key || key.trim() === '') {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), '变量Key不为空');
                }
                const keys = key.split(',').map(k => k.trim());
                const values = valueRaw.split(',').map(v => v.trim());
                if (keys.length !== values.length) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), '变量的Key和值数量要相同');
                }
                for (let j = 0; j < keys.length; j++) {
                    const currentKey = keys[j];
                    let valueParsed;
                    try {
                        if (valueType === 'string') {
                            valueParsed = values[j];
                        }
                        else if (valueType === 'number') {
                            valueParsed = Number(values[j]);
                            if (isNaN(valueParsed))
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Invalid number');
                        }
                        else if (valueType === 'boolean') {
                            valueParsed = ((_a = values[j]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true';
                        }
                        else if (valueType === 'object' || valueType === 'array') {
                            valueParsed = JSON.parse(values[j] || '{}');
                            if (valueType === 'array' && !Array.isArray(valueParsed)) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Value is not an array');
                            }
                        }
                        else {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Unsupported value type');
                        }
                    }
                    catch (err) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `Failed to parse value as ${valueType}: ${err.message}`);
                    }
                    data[currentKey] = valueParsed;
                }
                fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
                output.keys = keys;
                output.success = true;
            }
            else if (action === 'delete') {
                if (!key || key.trim() === '') {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Key is required and cannot be empty');
                }
                const keysToDelete = key.split(',').map(k => k.trim());
                output.deleted = [];
                output.notFound = [];
                for (let j = 0; j < keysToDelete.length; j++) {
                    const currentKey = keysToDelete[j];
                    if (currentKey in data) {
                        delete data[currentKey];
                        output.deleted.push(currentKey);
                    }
                    else {
                        output.notFound.push(currentKey);
                    }
                }
                fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
            }
            else if (action === 'list') {
                output.variables = data;
            }
            else {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `Unknown action: ${action}`);
            }
            returnData.push({ json: output });
        }
        return this.prepareOutputData(returnData);
    }
}
exports.FileGlobalVariable = FileGlobalVariable;
//# sourceMappingURL=FileGlobalVariable.node.js.map