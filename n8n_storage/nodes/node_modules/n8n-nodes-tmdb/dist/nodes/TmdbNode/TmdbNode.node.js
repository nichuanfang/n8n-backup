"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TmdbNode = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const CollectionFunctions_1 = require("./CollectionFunctions");
const CompanyFunctions_1 = require("./CompanyFunctions");
const MovieFunctions_1 = require("./MovieFunctions");
const PersonFunctions_1 = require("./PersonFunctions");
const TvFunctions_1 = require("./TvFunctions");
const MovieListFunctions_1 = require("./MovieListFunctions");
class TmdbNode {
    constructor() {
        this.description = {
            displayName: 'Tmdb Node',
            name: 'tmdbNode',
            icon: 'file:tmdb.svg',
            group: ['transform'],
            version: 1,
            description: 'Tmdb Node',
            defaults: {
                name: 'Tmdb Node',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'tmdbApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    default: 'get_company',
                    options: [
                        { name: 'Get Collection', value: 'get_collection' },
                        { name: 'Get Company', value: 'get_company' },
                        { name: 'Get Movie', value: 'get_movie' },
                        { name: 'Get Movie List', value: 'get_movie_list' },
                        { name: 'Get Person', value: 'get_person' },
                        { name: 'Get TV', value: 'get_tv' },
                    ],
                },
                {
                    displayName: 'Language',
                    name: 'language',
                    type: 'string',
                    default: 'en',
                },
                {
                    displayName: 'Company ID',
                    name: 'company_id',
                    type: 'number',
                    default: '',
                    placeholder: '123',
                    displayOptions: {
                        show: {
                            '/operation': ['get_company'],
                        },
                    },
                },
                {
                    displayName: 'Movie ID',
                    name: 'movie_id',
                    type: 'number',
                    default: '',
                    placeholder: '123',
                    displayOptions: {
                        show: {
                            '/operation': ['get_movie'],
                        },
                    },
                },
                {
                    displayName: 'Append to Response',
                    name: 'movie_append_to_response',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            '/operation': ['get_movie'],
                        },
                    },
                },
                {
                    displayName: 'Collection ID',
                    name: 'collection_id',
                    type: 'number',
                    default: '',
                    placeholder: '123',
                    displayOptions: {
                        show: {
                            '/operation': ['get_collection'],
                        },
                    },
                },
                {
                    displayName: 'Append to Response',
                    name: 'collection_append_to_response',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            '/operation': ['get_collection'],
                        },
                    },
                },
                {
                    displayName: 'Person ID',
                    name: 'person_id',
                    type: 'number',
                    default: '',
                    placeholder: '123',
                    displayOptions: {
                        show: {
                            '/operation': ['get_person'],
                        },
                    },
                },
                {
                    displayName: 'Append to Response',
                    name: 'person_append_to_response',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            '/operation': ['get_person'],
                        },
                    },
                },
                {
                    displayName: 'TV ID',
                    name: 'tv_id',
                    type: 'number',
                    default: '',
                    placeholder: '123',
                    displayOptions: {
                        show: {
                            '/operation': ['get_tv'],
                        },
                    },
                },
                {
                    displayName: 'Append to Response',
                    name: 'tv_append_to_response',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            '/operation': ['get_tv'],
                        },
                    },
                },
                {
                    displayName: 'Movie List Type',
                    name: 'movie_list_type',
                    type: 'options',
                    options: [
                        { name: 'Now Playing', value: 'now_playing' },
                        { name: 'Popular', value: 'popular' },
                        { name: 'Top Rated', value: 'top_rated' },
                        { name: 'Upcoming', value: 'upcoming' },
                    ],
                    default: 'now_playing',
                    displayOptions: {
                        show: {
                            '/operation': ['get_movie_list'],
                        },
                    },
                },
                {
                    displayName: 'Page',
                    name: 'page',
                    type: 'number',
                    default: 1,
                    displayOptions: {
                        show: {
                            '/operation': ['get_movie_list'],
                        },
                    },
                },
                {
                    displayName: 'Region',
                    name: 'region',
                    type: 'string',
                    default: '',
                    placeholder: 'ISO-3166-1 code',
                    displayOptions: {
                        show: {
                            '/operation': ['get_movie_list'],
                        },
                    },
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        let item;
        let operation;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            try {
                item = items[itemIndex];
                operation = this.getNodeParameter('operation', itemIndex);
                switch (operation) {
                    case 'get_collection':
                        item.json = await (0, CollectionFunctions_1.getCollection)(this, itemIndex);
                        break;
                    case 'get_company':
                        item.json = await (0, CompanyFunctions_1.getCompany)(this, itemIndex);
                        break;
                    case 'get_movie':
                        item.json = await (0, MovieFunctions_1.getMovie)(this, itemIndex);
                        break;
                    case 'get_person':
                        item.json = await (0, PersonFunctions_1.getPerson)(this, itemIndex);
                        break;
                    case 'get_tv':
                        item.json = await (0, TvFunctions_1.getTv)(this, itemIndex);
                        break;
                    case 'get_movie_list':
                        item.json = await (0, MovieListFunctions_1.getMovieList)(this, itemIndex);
                        break;
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    items.push({ json: this.getInputData(itemIndex)[0].json, error, pairedItem: itemIndex });
                }
                else {
                    if (error.context) {
                        error.context.itemIndex = itemIndex;
                        throw error;
                    }
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
                        itemIndex,
                    });
                }
            }
        }
        return this.prepareOutputData(items);
    }
}
exports.TmdbNode = TmdbNode;
//# sourceMappingURL=TmdbNode.node.js.map