"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCollection = getCollection;
const UrlFunctions_1 = require("./UrlFunctions");
async function getCollection(context, itemIndex) {
    var _a, _b, _c, _d;
    const language = context.getNodeParameter('language', itemIndex);
    const collectionId = context.getNodeParameter('collection_id', itemIndex);
    const appendToResponse = context.getNodeParameter('collection_append_to_response', itemIndex);
    const response = await context.helpers.httpRequestWithAuthentication.call(context, 'tmdbApi', {
        headers: {
            Accept: 'application/json',
        },
        method: 'GET',
        url: `https://api.themoviedb.org/3/collection/${collectionId}?language=${language}&append_to_response=${appendToResponse}`,
    });
    if (response.images) {
        response.images.backdrops = (_b = (_a = response.images) === null || _a === void 0 ? void 0 : _a.backdrops) === null || _b === void 0 ? void 0 : _b.map((backdrop) => ({
            ...backdrop,
            urls: (0, UrlFunctions_1.getBackdropUrls)(backdrop.file_path),
        }));
        response.images.posters = (_d = (_c = response.images) === null || _c === void 0 ? void 0 : _c.posters) === null || _d === void 0 ? void 0 : _d.map((poster) => ({
            ...poster,
            urls: (0, UrlFunctions_1.getPosterUrls)(poster.file_path),
        }));
    }
    if (response.parts) {
        response.parts = response.parts.map((part) => ({
            ...part,
            poster_urls: (0, UrlFunctions_1.getPosterUrls)(part.poster_path),
            backdrop_urls: (0, UrlFunctions_1.getBackdropUrls)(part.backdrop_path),
        }));
    }
    return {
        ...response,
        poster_urls: (0, UrlFunctions_1.getPosterUrls)(response.poster_path),
        backdrop_urls: (0, UrlFunctions_1.getBackdropUrls)(response.backdrop_path),
    };
}
//# sourceMappingURL=CollectionFunctions.js.map