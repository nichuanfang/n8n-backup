"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTv = getTv;
const UrlFunctions_1 = require("./UrlFunctions");
async function getTv(context, itemIndex) {
    var _a, _b, _c, _d, _e, _f;
    const language = context.getNodeParameter('language', itemIndex);
    const tvId = context.getNodeParameter('tv_id', itemIndex);
    const appendToResponse = context.getNodeParameter('tv_append_to_response', itemIndex);
    const response = await context.helpers.httpRequestWithAuthentication.call(context, 'tmdbApi', {
        headers: {
            Accept: 'application/json',
        },
        method: 'GET',
        url: `https://api.themoviedb.org/3/tv/${tvId}?language=${language}&append_to_response=${appendToResponse}`,
    });
    if (response.created_by) {
        response.created_by = response.created_by.map((createdBy) => ({
            ...createdBy,
            profile_urls: (0, UrlFunctions_1.getProfileUrls)(createdBy.profile_path),
        }));
    }
    if (response.production_companies) {
        response.production_companies = response.production_companies.map((company) => ({
            ...company,
            logo_urls: (0, UrlFunctions_1.getLogoUrls)(company.logo_path),
        }));
    }
    if (response.networks) {
        response.networks = response.networks.map((network) => ({
            ...network,
            logo_urls: (0, UrlFunctions_1.getLogoUrls)(network.logo_path),
        }));
    }
    if (response.seasons) {
        response.seasons = response.seasons.map((season) => ({
            ...season,
            poster_urls: (0, UrlFunctions_1.getLogoUrls)(season.poster_path),
        }));
    }
    if (response.images) {
        response.images.backdrops = (_b = (_a = response.images) === null || _a === void 0 ? void 0 : _a.backdrops) === null || _b === void 0 ? void 0 : _b.map((backdrop) => ({
            ...backdrop,
            urls: (0, UrlFunctions_1.getBackdropUrls)(backdrop.file_path),
        }));
        response.images.logos = (_d = (_c = response.images) === null || _c === void 0 ? void 0 : _c.logos) === null || _d === void 0 ? void 0 : _d.map((logo) => ({
            ...logo,
            urls: (0, UrlFunctions_1.getLogoUrls)(logo.file_path),
        }));
        response.images.posters = (_f = (_e = response.images) === null || _e === void 0 ? void 0 : _e.posters) === null || _f === void 0 ? void 0 : _f.map((poster) => ({
            ...poster,
            urls: (0, UrlFunctions_1.getPosterUrls)(poster.file_path),
        }));
    }
    if (response.credits) {
        response.credits.cast = response.credits.cast.map((cast) => ({
            ...cast,
            profile_urls: (0, UrlFunctions_1.getProfileUrls)(cast.profile_path),
        }));
        response.credits.crew = response.credits.crew.map((crew) => ({
            ...crew,
            profile_urls: (0, UrlFunctions_1.getProfileUrls)(crew.profile_path),
        }));
    }
    if (response.last_episode_to_air) {
        response.last_episode_to_air = {
            ...response.last_episode_to_air,
            still_urls: (0, UrlFunctions_1.getStillUrls)(response.last_episode_to_air.still_path),
        };
    }
    if (response.next_episode_to_air) {
        response.next_episode_to_air = {
            ...response.next_episode_to_air,
            still_urls: (0, UrlFunctions_1.getStillUrls)(response.next_episode_to_air.still_path),
        };
    }
    return {
        ...response,
        poster_urls: (0, UrlFunctions_1.getPosterUrls)(response.poster_path),
        backdrop_urls: (0, UrlFunctions_1.getBackdropUrls)(response.backdrop_path),
    };
}
//# sourceMappingURL=TvFunctions.js.map